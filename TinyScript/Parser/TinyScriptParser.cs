//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TinyScript.g4 by ANTLR 4.5.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.2")]
[System.CLSCompliant(false)]
public partial class TinyScriptParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, StringLiteral=33, Decimal=34, Identifier=35, LineComment=36, 
		Comment=37, WhiteSpace=38;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_ifStatement = 2, RULE_quoteExpr = 3, 
		RULE_blockStatement = 4, RULE_assignStatement = 5, RULE_declareStatement = 6, 
		RULE_printStatement = 7, RULE_whileStatement = 8, RULE_doWhileStatement = 9, 
		RULE_forStatement = 10, RULE_commonExpression = 11, RULE_assignAbleStatement = 12, 
		RULE_declareExpression = 13, RULE_expression = 14, RULE_andAndExpression = 15, 
		RULE_cmpExpression = 16, RULE_addExpression = 17, RULE_mulExpression = 18, 
		RULE_unaryExpression = 19, RULE_primaryExpression = 20, RULE_variableExpression = 21, 
		RULE_basicType = 22, RULE_declarators = 23, RULE_assign = 24, RULE_numericLiteral = 25;
	public static readonly string[] ruleNames = {
		"program", "statement", "ifStatement", "quoteExpr", "blockStatement", 
		"assignStatement", "declareStatement", "printStatement", "whileStatement", 
		"doWhileStatement", "forStatement", "commonExpression", "assignAbleStatement", 
		"declareExpression", "expression", "andAndExpression", "cmpExpression", 
		"addExpression", "mulExpression", "unaryExpression", "primaryExpression", 
		"variableExpression", "basicType", "declarators", "assign", "numericLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'else'", "'('", "')'", "'{'", "'}'", "';'", "'print'", 
		"'while'", "'do'", "'for'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'<='", 
		"'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'!'", "'true'", "'false'", 
		"'decimal'", "'string'", "'bool'", "'var'", "','", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "StringLiteral", 
		"Decimal", "Identifier", "LineComment", "Comment", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TinyScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TinyScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TinyScriptParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 52; statement();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << Identifier))) != 0) );
			State = 57; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		public DeclareStatementContext declareStatement() {
			return GetRuleContext<DeclareStatementContext>(0);
		}
		public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 67;
			switch (TokenStream.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; ifStatement();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; blockStatement();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 61; assignStatement();
				}
				break;
			case T__26:
			case T__27:
			case T__28:
			case T__29:
				EnterOuterAlt(_localctx, 4);
				{
				State = 62; declareStatement();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 63; printStatement();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 64; whileStatement();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 7);
				{
				State = 65; doWhileStatement();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 8);
				{
				State = 66; forStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public QuoteExprContext quoteExpr() {
			return GetRuleContext<QuoteExprContext>(0);
		}
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_ifStatement);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; Match(T__0);
				State = 70; quoteExpr();
				State = 71; blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; Match(T__0);
				State = 74; quoteExpr();
				State = 75; blockStatement();
				State = 76; Match(T__1);
				State = 77; blockStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuoteExprContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public QuoteExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quoteExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuoteExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuoteExprContext quoteExpr() {
		QuoteExprContext _localctx = new QuoteExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_quoteExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(T__2);
			State = 82; expression();
			State = 83; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(T__4);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << Identifier))) != 0)) {
				{
				{
				State = 86; statement();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 92; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; assign();
			State = 95; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStatementContext : ParserRuleContext {
		public DeclareExpressionContext declareExpression() {
			return GetRuleContext<DeclareExpressionContext>(0);
		}
		public DeclareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStatementContext declareStatement() {
		DeclareStatementContext _localctx = new DeclareStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_declareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; declareExpression();
			State = 98; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(T__7);
			State = 101; Match(T__2);
			State = 102; expression();
			State = 103; Match(T__3);
			State = 104; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(T__8);
			State = 107; Match(T__2);
			State = 108; expression();
			State = 109; Match(T__3);
			State = 110; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(T__9);
			State = 113; blockStatement();
			State = 114; Match(T__8);
			State = 115; Match(T__2);
			State = 116; expression();
			State = 117; Match(T__3);
			State = 118; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public CommonExpressionContext commonExpression() {
			return GetRuleContext<CommonExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignAbleStatementContext assignAbleStatement() {
			return GetRuleContext<AssignAbleStatementContext>(0);
		}
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(T__10);
			State = 121; Match(T__2);
			State = 122; commonExpression();
			State = 123; Match(T__6);
			State = 124; expression();
			State = 125; Match(T__6);
			State = 126; assignAbleStatement();
			State = 127; Match(T__3);
			State = 128; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonExpressionContext : ParserRuleContext {
		public DeclareExpressionContext declareExpression() {
			return GetRuleContext<DeclareExpressionContext>(0);
		}
		public AssignAbleStatementContext assignAbleStatement() {
			return GetRuleContext<AssignAbleStatementContext>(0);
		}
		public CommonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonExpressionContext commonExpression() {
		CommonExpressionContext _localctx = new CommonExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_commonExpression);
		try {
			State = 132;
			switch (TokenStream.La(1)) {
			case T__26:
			case T__27:
			case T__28:
			case T__29:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; declareExpression();
				}
				break;
			case T__2:
			case T__20:
			case T__23:
			case T__24:
			case T__25:
			case StringLiteral:
			case Decimal:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131; assignAbleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignAbleStatementContext : ParserRuleContext {
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignAbleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignAbleStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignAbleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignAbleStatementContext assignAbleStatement() {
		AssignAbleStatementContext _localctx = new AssignAbleStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignAbleStatement);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134; assign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareExpressionContext : ParserRuleContext {
		public BasicTypeContext basicType() {
			return GetRuleContext<BasicTypeContext>(0);
		}
		public DeclaratorsContext declarators() {
			return GetRuleContext<DeclaratorsContext>(0);
		}
		public DeclareExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareExpressionContext declareExpression() {
		DeclareExpressionContext _localctx = new DeclareExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_declareExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; basicType();
			State = 139; declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AndAndExpressionContext[] andAndExpression() {
			return GetRuleContexts<AndAndExpressionContext>();
		}
		public AndAndExpressionContext andAndExpression(int i) {
			return GetRuleContext<AndAndExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; andAndExpression();
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__11) {
				{
				{
				State = 142; Match(T__11);
				State = 143; andAndExpression();
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndAndExpressionContext : ParserRuleContext {
		public CmpExpressionContext[] cmpExpression() {
			return GetRuleContexts<CmpExpressionContext>();
		}
		public CmpExpressionContext cmpExpression(int i) {
			return GetRuleContext<CmpExpressionContext>(i);
		}
		public AndAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andAndExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndAndExpressionContext andAndExpression() {
		AndAndExpressionContext _localctx = new AndAndExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_andAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; cmpExpression();
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__12) {
				{
				{
				State = 150; Match(T__12);
				State = 151; cmpExpression();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpExpressionContext : ParserRuleContext {
		public AddExpressionContext[] addExpression() {
			return GetRuleContexts<AddExpressionContext>();
		}
		public AddExpressionContext addExpression(int i) {
			return GetRuleContext<AddExpressionContext>(i);
		}
		public CmpExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpExpressionContext cmpExpression() {
		CmpExpressionContext _localctx = new CmpExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_cmpExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; addExpression();
			State = 160;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18))) != 0)) {
				{
				State = 158;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 159; addExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExpressionContext : ParserRuleContext {
		public MulExpressionContext[] mulExpression() {
			return GetRuleContexts<MulExpressionContext>();
		}
		public MulExpressionContext mulExpression(int i) {
			return GetRuleContext<MulExpressionContext>(i);
		}
		public AddExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExpressionContext addExpression() {
		AddExpressionContext _localctx = new AddExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_addExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; mulExpression();
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__19 || _la==T__20) {
				{
				{
				State = 163;
				_la = TokenStream.La(1);
				if ( !(_la==T__19 || _la==T__20) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 164; mulExpression();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulExpressionContext : ParserRuleContext {
		public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MulExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulExpressionContext mulExpression() {
		MulExpressionContext _localctx = new MulExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_mulExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; unaryExpression();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__21 || _la==T__22) {
				{
				{
				State = 171;
				_la = TokenStream.La(1);
				if ( !(_la==T__21 || _la==T__22) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 172; unaryExpression();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryExpression);
		int _la;
		try {
			State = 181;
			switch (TokenStream.La(1)) {
			case T__2:
			case T__24:
			case T__25:
			case StringLiteral:
			case Decimal:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178; primaryExpression();
				}
				break;
			case T__20:
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				_la = TokenStream.La(1);
				if ( !(_la==T__20 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 180; unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_primaryExpression);
		try {
			State = 189;
			switch (TokenStream.La(1)) {
			case T__24:
			case T__25:
			case StringLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183; variableExpression();
				}
				break;
			case Decimal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; numericLiteral();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185; Match(T__2);
				State = 186; expression();
				State = 187; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TinyScriptParser.Identifier, 0); }
		public ITerminalNode StringLiteral() { return GetToken(TinyScriptParser.StringLiteral, 0); }
		public VariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpressionContext variableExpression() {
		VariableExpressionContext _localctx = new VariableExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_variableExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__24) | (1L << T__25) | (1L << StringLiteral) | (1L << Identifier))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicTypeContext : ParserRuleContext {
		public BasicTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicTypeContext basicType() {
		BasicTypeContext _localctx = new BasicTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_basicType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorsContext : ParserRuleContext {
		public AssignContext[] assign() {
			return GetRuleContexts<AssignContext>();
		}
		public AssignContext assign(int i) {
			return GetRuleContext<AssignContext>(i);
		}
		public DeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarators; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorsContext declarators() {
		DeclaratorsContext _localctx = new DeclaratorsContext(Context, State);
		EnterRule(_localctx, 46, RULE_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; assign();
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__30) {
				{
				{
				State = 196; Match(T__30);
				State = 197; assign();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(TinyScriptParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 48, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(Identifier);
			State = 204; Match(T__31);
			State = 205; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ITerminalNode Decimal() { return GetToken(TinyScriptParser.Decimal, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITinyScriptVisitor<TResult> typedVisitor = visitor as ITinyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_numericLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(Decimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3(\xD4");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17");
		sb.Append("\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B\x3\x2\x6");
		sb.Append("\x2\x38\n\x2\r\x2\xE\x2\x39\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x46\n\x3\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4R\n\x4\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6Z\n\x6\f\x6\xE\x6]\v\x6\x3");
		sb.Append("\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\r\x3\r\x5\r\x87\n\r\x3\xE\x3\xE\x5\xE\x8B\n\xE");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\a\x10\x93\n\x10\f\x10");
		sb.Append("\xE\x10\x96\v\x10\x3\x11\x3\x11\x3\x11\a\x11\x9B\n\x11\f\x11");
		sb.Append("\xE\x11\x9E\v\x11\x3\x12\x3\x12\x3\x12\x5\x12\xA3\n\x12\x3\x13");
		sb.Append("\x3\x13\x3\x13\a\x13\xA8\n\x13\f\x13\xE\x13\xAB\v\x13\x3\x14");
		sb.Append("\x3\x14\x3\x14\a\x14\xB0\n\x14\f\x14\xE\x14\xB3\v\x14\x3\x15");
		sb.Append("\x3\x15\x3\x15\x5\x15\xB8\n\x15\x3\x16\x3\x16\x3\x16\x3\x16");
		sb.Append("\x3\x16\x3\x16\x5\x16\xC0\n\x16\x3\x17\x3\x17\x3\x18\x3\x18");
		sb.Append("\x3\x19\x3\x19\x3\x19\a\x19\xC9\n\x19\f\x19\xE\x19\xCC\v\x19");
		sb.Append("\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x2\x2\x1C");
		sb.Append("\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.");
		sb.Append("\x30\x32\x34\x2\b\x3\x2\x10\x15\x3\x2\x16\x17\x3\x2\x18\x19");
		sb.Append("\x4\x2\x17\x17\x1A\x1A\x5\x2\x1B\x1C##%%\x3\x2\x1D \xCE\x2\x37");
		sb.Append("\x3\x2\x2\x2\x4\x45\x3\x2\x2\x2\x6Q\x3\x2\x2\x2\bS\x3\x2\x2");
		sb.Append("\x2\nW\x3\x2\x2\x2\f`\x3\x2\x2\x2\xE\x63\x3\x2\x2\x2\x10\x66");
		sb.Append("\x3\x2\x2\x2\x12l\x3\x2\x2\x2\x14r\x3\x2\x2\x2\x16z\x3\x2\x2");
		sb.Append("\x2\x18\x86\x3\x2\x2\x2\x1A\x8A\x3\x2\x2\x2\x1C\x8C\x3\x2\x2");
		sb.Append("\x2\x1E\x8F\x3\x2\x2\x2 \x97\x3\x2\x2\x2\"\x9F\x3\x2\x2\x2$");
		sb.Append("\xA4\x3\x2\x2\x2&\xAC\x3\x2\x2\x2(\xB7\x3\x2\x2\x2*\xBF\x3\x2");
		sb.Append("\x2\x2,\xC1\x3\x2\x2\x2.\xC3\x3\x2\x2\x2\x30\xC5\x3\x2\x2\x2");
		sb.Append("\x32\xCD\x3\x2\x2\x2\x34\xD1\x3\x2\x2\x2\x36\x38\x5\x4\x3\x2");
		sb.Append("\x37\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2");
		sb.Append("\x39:\x3\x2\x2\x2:;\x3\x2\x2\x2;<\a\x2\x2\x3<\x3\x3\x2\x2\x2");
		sb.Append("=\x46\x5\x6\x4\x2>\x46\x5\n\x6\x2?\x46\x5\f\a\x2@\x46\x5\xE");
		sb.Append("\b\x2\x41\x46\x5\x10\t\x2\x42\x46\x5\x12\n\x2\x43\x46\x5\x14");
		sb.Append("\v\x2\x44\x46\x5\x16\f\x2\x45=\x3\x2\x2\x2\x45>\x3\x2\x2\x2");
		sb.Append("\x45?\x3\x2\x2\x2\x45@\x3\x2\x2\x2\x45\x41\x3\x2\x2\x2\x45\x42");
		sb.Append("\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x44\x3\x2\x2\x2\x46\x5");
		sb.Append("\x3\x2\x2\x2GH\a\x3\x2\x2HI\x5\b\x5\x2IJ\x5\n\x6\x2JR\x3\x2");
		sb.Append("\x2\x2KL\a\x3\x2\x2LM\x5\b\x5\x2MN\x5\n\x6\x2NO\a\x4\x2\x2O");
		sb.Append("P\x5\n\x6\x2PR\x3\x2\x2\x2QG\x3\x2\x2\x2QK\x3\x2\x2\x2R\a\x3");
		sb.Append("\x2\x2\x2ST\a\x5\x2\x2TU\x5\x1E\x10\x2UV\a\x6\x2\x2V\t\x3\x2");
		sb.Append("\x2\x2W[\a\a\x2\x2XZ\x5\x4\x3\x2YX\x3\x2\x2\x2Z]\x3\x2\x2\x2");
		sb.Append("[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\^\x3\x2\x2\x2][\x3\x2\x2\x2^");
		sb.Append("_\a\b\x2\x2_\v\x3\x2\x2\x2`\x61\x5\x32\x1A\x2\x61\x62\a\t\x2");
		sb.Append("\x2\x62\r\x3\x2\x2\x2\x63\x64\x5\x1C\xF\x2\x64\x65\a\t\x2\x2");
		sb.Append("\x65\xF\x3\x2\x2\x2\x66g\a\n\x2\x2gh\a\x5\x2\x2hi\x5\x1E\x10");
		sb.Append("\x2ij\a\x6\x2\x2jk\a\t\x2\x2k\x11\x3\x2\x2\x2lm\a\v\x2\x2mn");
		sb.Append("\a\x5\x2\x2no\x5\x1E\x10\x2op\a\x6\x2\x2pq\x5\n\x6\x2q\x13\x3");
		sb.Append("\x2\x2\x2rs\a\f\x2\x2st\x5\n\x6\x2tu\a\v\x2\x2uv\a\x5\x2\x2");
		sb.Append("vw\x5\x1E\x10\x2wx\a\x6\x2\x2xy\a\t\x2\x2y\x15\x3\x2\x2\x2z");
		sb.Append("{\a\r\x2\x2{|\a\x5\x2\x2|}\x5\x18\r\x2}~\a\t\x2\x2~\x7F\x5\x1E");
		sb.Append("\x10\x2\x7F\x80\a\t\x2\x2\x80\x81\x5\x1A\xE\x2\x81\x82\a\x6");
		sb.Append("\x2\x2\x82\x83\x5\n\x6\x2\x83\x17\x3\x2\x2\x2\x84\x87\x5\x1C");
		sb.Append("\xF\x2\x85\x87\x5\x1A\xE\x2\x86\x84\x3\x2\x2\x2\x86\x85\x3\x2");
		sb.Append("\x2\x2\x87\x19\x3\x2\x2\x2\x88\x8B\x5\x32\x1A\x2\x89\x8B\x5");
		sb.Append("\x1E\x10\x2\x8A\x88\x3\x2\x2\x2\x8A\x89\x3\x2\x2\x2\x8B\x1B");
		sb.Append("\x3\x2\x2\x2\x8C\x8D\x5.\x18\x2\x8D\x8E\x5\x30\x19\x2\x8E\x1D");
		sb.Append("\x3\x2\x2\x2\x8F\x94\x5 \x11\x2\x90\x91\a\xE\x2\x2\x91\x93\x5");
		sb.Append(" \x11\x2\x92\x90\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2\x94\x92\x3");
		sb.Append("\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x1F\x3\x2\x2\x2\x96\x94\x3");
		sb.Append("\x2\x2\x2\x97\x9C\x5\"\x12\x2\x98\x99\a\xF\x2\x2\x99\x9B\x5");
		sb.Append("\"\x12\x2\x9A\x98\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3");
		sb.Append("\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D!\x3\x2\x2\x2\x9E\x9C\x3\x2");
		sb.Append("\x2\x2\x9F\xA2\x5$\x13\x2\xA0\xA1\t\x2\x2\x2\xA1\xA3\x5$\x13");
		sb.Append("\x2\xA2\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3#\x3\x2\x2\x2");
		sb.Append("\xA4\xA9\x5&\x14\x2\xA5\xA6\t\x3\x2\x2\xA6\xA8\x5&\x14\x2\xA7");
		sb.Append("\xA5\x3\x2\x2\x2\xA8\xAB\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9");
		sb.Append("\xAA\x3\x2\x2\x2\xAA%\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAC\xB1");
		sb.Append("\x5(\x15\x2\xAD\xAE\t\x4\x2\x2\xAE\xB0\x5(\x15\x2\xAF\xAD\x3");
		sb.Append("\x2\x2\x2\xB0\xB3\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB2\x3");
		sb.Append("\x2\x2\x2\xB2\'\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4\xB8\x5*");
		sb.Append("\x16\x2\xB5\xB6\t\x5\x2\x2\xB6\xB8\x5(\x15\x2\xB7\xB4\x3\x2");
		sb.Append("\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8)\x3\x2\x2\x2\xB9\xC0\x5,\x17");
		sb.Append("\x2\xBA\xC0\x5\x34\x1B\x2\xBB\xBC\a\x5\x2\x2\xBC\xBD\x5\x1E");
		sb.Append("\x10\x2\xBD\xBE\a\x6\x2\x2\xBE\xC0\x3\x2\x2\x2\xBF\xB9\x3\x2");
		sb.Append("\x2\x2\xBF\xBA\x3\x2\x2\x2\xBF\xBB\x3\x2\x2\x2\xC0+\x3\x2\x2");
		sb.Append("\x2\xC1\xC2\t\x6\x2\x2\xC2-\x3\x2\x2\x2\xC3\xC4\t\a\x2\x2\xC4");
		sb.Append("/\x3\x2\x2\x2\xC5\xCA\x5\x32\x1A\x2\xC6\xC7\a!\x2\x2\xC7\xC9");
		sb.Append("\x5\x32\x1A\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCC\x3\x2\x2\x2\xCA\xC8");
		sb.Append("\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\x31\x3\x2\x2\x2\xCC\xCA");
		sb.Append("\x3\x2\x2\x2\xCD\xCE\a%\x2\x2\xCE\xCF\a\"\x2\x2\xCF\xD0\x5\x1E");
		sb.Append("\x10\x2\xD0\x33\x3\x2\x2\x2\xD1\xD2\a$\x2\x2\xD2\x35\x3\x2\x2");
		sb.Append("\x2\x10\x39\x45Q[\x86\x8A\x94\x9C\xA2\xA9\xB1\xB7\xBF\xCA");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
